// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: grpc-books/books.proto

package books

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageManagementClient is the client API for StorageManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageManagementClient interface {
	CreateNewBook(ctx context.Context, in *NewBook, opts ...grpc.CallOption) (*Book, error)
	CreateNewAuthor(ctx context.Context, in *NewAuthor, opts ...grpc.CallOption) (*Author, error)
	GetAuthors(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*AuthorList, error)
	GetBooks(ctx context.Context, in *BooksRequest, opts ...grpc.CallOption) (*BooksList, error)
}

type storageManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageManagementClient(cc grpc.ClientConnInterface) StorageManagementClient {
	return &storageManagementClient{cc}
}

func (c *storageManagementClient) CreateNewBook(ctx context.Context, in *NewBook, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/books.StorageManagement/CreateNewBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageManagementClient) CreateNewAuthor(ctx context.Context, in *NewAuthor, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/books.StorageManagement/CreateNewAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageManagementClient) GetAuthors(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*AuthorList, error) {
	out := new(AuthorList)
	err := c.cc.Invoke(ctx, "/books.StorageManagement/GetAuthors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageManagementClient) GetBooks(ctx context.Context, in *BooksRequest, opts ...grpc.CallOption) (*BooksList, error) {
	out := new(BooksList)
	err := c.cc.Invoke(ctx, "/books.StorageManagement/GetBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageManagementServer is the server API for StorageManagement service.
// All implementations must embed UnimplementedStorageManagementServer
// for forward compatibility
type StorageManagementServer interface {
	CreateNewBook(context.Context, *NewBook) (*Book, error)
	CreateNewAuthor(context.Context, *NewAuthor) (*Author, error)
	GetAuthors(context.Context, *AuthorRequest) (*AuthorList, error)
	GetBooks(context.Context, *BooksRequest) (*BooksList, error)
	mustEmbedUnimplementedStorageManagementServer()
}

// UnimplementedStorageManagementServer must be embedded to have forward compatible implementations.
type UnimplementedStorageManagementServer struct {
}

func (UnimplementedStorageManagementServer) CreateNewBook(context.Context, *NewBook) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewBook not implemented")
}
func (UnimplementedStorageManagementServer) CreateNewAuthor(context.Context, *NewAuthor) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewAuthor not implemented")
}
func (UnimplementedStorageManagementServer) GetAuthors(context.Context, *AuthorRequest) (*AuthorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthors not implemented")
}
func (UnimplementedStorageManagementServer) GetBooks(context.Context, *BooksRequest) (*BooksList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedStorageManagementServer) mustEmbedUnimplementedStorageManagementServer() {}

// UnsafeStorageManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageManagementServer will
// result in compilation errors.
type UnsafeStorageManagementServer interface {
	mustEmbedUnimplementedStorageManagementServer()
}

func RegisterStorageManagementServer(s grpc.ServiceRegistrar, srv StorageManagementServer) {
	s.RegisterService(&StorageManagement_ServiceDesc, srv)
}

func _StorageManagement_CreateNewBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementServer).CreateNewBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books.StorageManagement/CreateNewBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementServer).CreateNewBook(ctx, req.(*NewBook))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageManagement_CreateNewAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAuthor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementServer).CreateNewAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books.StorageManagement/CreateNewAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementServer).CreateNewAuthor(ctx, req.(*NewAuthor))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageManagement_GetAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementServer).GetAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books.StorageManagement/GetAuthors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementServer).GetAuthors(ctx, req.(*AuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageManagement_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books.StorageManagement/GetBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementServer).GetBooks(ctx, req.(*BooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageManagement_ServiceDesc is the grpc.ServiceDesc for StorageManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "books.StorageManagement",
	HandlerType: (*StorageManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewBook",
			Handler:    _StorageManagement_CreateNewBook_Handler,
		},
		{
			MethodName: "CreateNewAuthor",
			Handler:    _StorageManagement_CreateNewAuthor_Handler,
		},
		{
			MethodName: "GetAuthors",
			Handler:    _StorageManagement_GetAuthors_Handler,
		},
		{
			MethodName: "GetBooks",
			Handler:    _StorageManagement_GetBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc-books/books.proto",
}
